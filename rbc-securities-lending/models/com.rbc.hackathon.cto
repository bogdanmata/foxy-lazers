/**
 * Write your model definitions here
 */

namespace com.rbc.hackathon

/**
 * The status of a secLending
 */
enum SecurityLendingContractStatus {
  o REQUESTED
  o RESPONDED
  o ACCEPTED
  o REJECTED
  o EXPIRED
  o ACTIVE
  o ENDED
}

enum FeesFrequency {
  o AT_CONTRACT_END
  o SEC_10
  o SEC_20
  o SEC_30
}

/**
 * An abstract participant type in this business network
 */
abstract participant BusinessUser identified by name {
  o String name
  --> Account account
  --> Portfolio portfolio
}

participant Bank extends BusinessUser {
}

participant Borrower extends BusinessUser {
}

asset PortfolioItem identified by id {
  o String id
  o Double quantity
  --> Instrument instrument
 }

asset Portfolio identified by owner {
    o String owner
    --> PortfolioItem[] portfolio
}

asset Account identified by owner {
    o String owner
    o Double accountBalance
}

abstract asset Instrument identified by isin {
  o String isin
  o String description
}

asset Bond extends Instrument {
}

abstract asset Collateral identified by id {
  o String id
}

asset CollateralCash extends Collateral {
  o Double amount
}

asset SecurityLendingContract identified by id {
  o String id
  o DateTime startDate
  o DateTime endDate
  o Double quantity
  o Collateral collateral optional
  o SecurityLendingContractStatus status
  o Double fees optional
  o FeesFrequency feesFrequency optional
  o DateTime lastCollectedFeesTimestamp optional
  --> Instrument instrument
  --> Bank bank optional
  --> Borrower borrower
}

asset SecurityLendingOffer identified by id {
  o String id
  o DateTime expirationDate
  o Double fees
  o FeesFrequency feesFrequency
  --> SecurityLendingContract securityLendingContract
  --> Bank bank
}

transaction LendingRequest {
  o DateTime startDate
  o DateTime endDate
  o Double quantity
  --> Instrument instrument
  --> Borrower borrower
}
transaction LendingOffer {
  o DateTime expirationDate
  o Double fees
  o FeesFrequency feesFrequency
  --> SecurityLendingContract securityLendingContract
  --> Bank bank
}
transaction LendingOfferAgreement {
  --> SecurityLendingOffer securityLendingOffer
}

transaction ExecuteContracts {
  --> Borrower borrower
  --> Bank bank
}

transaction ChangeOwnershipFromBank {
  --> Instrument intrument
  --> Bank bank
  --> Borrower borrower
  o Double quantityToTransfer
  
}

transaction ChangeOwnershipToBorrower {
  --> Instrument intrument
  --> Bank bank
  --> Borrower borrower
  o Double quantityToTransfer
  
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}

event OfferAccepted {
  --> SecurityLendingContract securityLendingContract
}

event SecLendingCreated {
  --> SecurityLendingContract securityLendingContract
}

event BasicEvent {
  o String content
}